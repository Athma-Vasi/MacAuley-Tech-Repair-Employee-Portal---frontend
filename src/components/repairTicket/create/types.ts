import {
  Country,
  Currency,
  PhoneNumber,
  PostalCode,
  Province,
  SetStepsInErrorPayload,
  StatesUS,
  Urgency,
} from "../../../types";
import { CustomerDocument } from "../../customer/types";
import { RepairCategory } from "../../dashboard/types";
import { PartsNeeded, RequiredRepairs } from "../types";

type CurrentSearchObject = Record<string, string>;
type CustomerSearchOperator = "AND" | "OR";

type CreateRepairTicketState = {
  // customer information search
  customerId: string; // selected customer id
  currentSearchObject: CurrentSearchObject;
  customerSearchResults: Omit<CustomerDocument, "password" | "paymentInformation">[];
  searchOperator: CustomerSearchOperator;
  clearSearchInputs: boolean;
  currentSearchResultPage: number;

  username: string;
  isValidUsername: boolean;
  isUsernameFocused: boolean;

  email: string;
  isValidEmail: boolean;
  isEmailFocused: boolean;

  firstName: string;
  isValidFirstName: boolean;
  isFirstNameFocused: boolean;

  middleName: string;
  isValidMiddleName: boolean;
  isMiddleNameFocused: boolean;

  lastName: string;
  isValidLastName: boolean;
  isLastNameFocused: boolean;

  preferredName: string;
  isValidPreferredName: boolean;
  isPreferredNameFocused: boolean;

  contactNumber: PhoneNumber | string;
  isValidContactNumber: boolean;
  isContactNumberFocused: boolean;

  addressLine: string;
  isValidAddressLine: boolean;
  isAddressLineFocused: boolean;

  city: string;
  isValidCity: boolean;
  isCityFocused: boolean;

  country: Country;
  province: Province;
  state: StatesUS;

  postalCode: PostalCode;
  isValidPostalCode: boolean;
  isPostalCodeFocused: boolean;

  // part information - page 2
  partName: string;
  isValidPartName: boolean;
  isPartNameFocused: boolean;

  partSerialId: string;
  isValidPartSerialId: boolean;
  isPartSerialIdFocused: boolean;

  dateReceived: string;
  isValidDateReceived: boolean;
  isDateReceivedFocused: boolean;

  descriptionOfIssue: string;
  isValidDescriptionOfIssue: boolean;
  isDescriptionOfIssueFocused: boolean;

  initialInspectionNotes: string;
  isValidInitialInspectionNotes: boolean;
  isInitialInspectionNotesFocused: boolean;

  // repair information - page 3
  repairCategory: RepairCategory;
  requiredRepairs: RequiredRepairs[];
  partsNeeded: PartsNeeded[];
  partsNeededModels: string;
  isValidPartsNeededModels: boolean;
  isPartsNeededModelsFocused: boolean;

  partUnderWarranty: boolean;
  estimatedRepairCost: string;
  estimatedRepairCostCurrency: Currency;
  isValidEstimatedRepairCost: boolean;
  isEstimatedRepairCostFocused: boolean;

  estimatedCompletionDate: string;
  isValidEstimatedCompletionDate: boolean;
  isEstimatedCompletionDateFocused: boolean;

  repairPriority: Urgency;

  // work order id is generated by the system
  // rest of the information is updated by the repair technician after the initial repair note is created

  triggerFormSubmit: boolean;
  currentStepperPosition: number;
  stepsInError: Set<number>;

  isSubmitting: boolean;
  submitMessage: string;
  isSuccessful: boolean;
  successMessage: string;
  isLoading: boolean;
  loadingMessage: string;
};

type CreateRepairTicketAction = {
  setCustomerId: "setCustomerId";
  setCurrentSearchObject: "setCurrentSearchObject";
  setCustomerSearchResults: "setCustomerSearchResults";
  setSearchOperator: "setSearchOperator";
  clearSearchInputs: "clearSearchInputs";
  setCurrentSearchResultPage: "setCurrentSearchResultPage";

  // customer information search
  setUsername: "setUsername";
  setIsValidUsername: "setIsValidUsername";
  setIsUsernameFocused: "setIsUsernameFocused";

  setEmail: "setEmail";
  setIsValidEmail: "setIsValidEmail";
  setIsEmailFocused: "setIsEmailFocused";

  setFirstName: "setFirstName";
  setIsValidFirstName: "setIsValidFirstName";
  setIsFirstNameFocused: "setIsFirstNameFocused";

  setMiddleName: "setMiddleName";
  setIsValidMiddleName: "setIsValidMiddleName";
  setIsMiddleNameFocused: "setIsMiddleNameFocused";

  setLastName: "setLastName";
  setIsValidLastName: "setIsValidLastName";
  setIsLastNameFocused: "setIsLastNameFocused";

  setPreferredName: "setPreferredName";
  setIsValidPreferredName: "setIsValidPreferredName";
  setIsPreferredNameFocused: "setIsPreferredNameFocused";

  setContactNumber: "setContactNumber";
  setIsValidContactNumber: "setIsValidContactNumber";
  setIsContactNumberFocused: "setIsContactNumberFocused";

  setAddressLine: "setAddressLine";
  setIsValidAddressLine: "setIsValidAddressLine";
  setIsAddressLineFocused: "setIsAddressLineFocused";

  setCity: "setCity";
  setIsValidCity: "setIsValidCity";
  setIsCityFocused: "setIsCityFocused";

  setCountry: "setCountry";
  setProvince: "setProvince";
  setState: "setState";

  setPostalCode: "setPostalCode";
  setIsValidPostalCode: "setIsValidPostalCode";
  setIsPostalCodeFocused: "setIsPostalCodeFocused";

  // part information
  setPartName: "setPartName";
  setIsValidPartName: "setIsValidPartName";
  setIsPartNameFocused: "setIsPartNameFocused";

  setPartSerialId: "setPartSerialId";
  setIsValidPartSerialId: "setIsValidPartSerialId";
  setIsPartSerialIdFocused: "setIsPartSerialIdFocused";

  setDateReceived: "setDateReceived";
  setIsValidDateReceived: "setIsValidDateReceived";
  setIsDateReceivedFocused: "setIsDateReceivedFocused";

  setDescriptionOfIssue: "setDescriptionOfIssue";
  setIsValidDescriptionOfIssue: "setIsValidDescriptionOfIssue";
  setIsDescriptionOfIssueFocused: "setIsDescriptionOfIssueFocused";

  setInitialInspectionNotes: "setInitialInspectionNotes";
  setIsValidInitialInspectionNotes: "setIsValidInitialInspectionNotes";
  setIsInitialInspectionNotesFocused: "setIsInitialInspectionNotesFocused";

  // repair information
  setRepairCategory: "setRepairCategory";
  setRequiredRepairs: "setRequiredRepairs";
  setPartsNeeded: "setPartsNeeded";
  setPartsNeededModels: "setPartsNeededModels";
  setIsValidPartsNeededModels: "setIsValidPartsNeededModels";
  setIsPartsNeededModelsFocused: "setIsPartsNeededModelsFocused";

  setPartUnderWarranty: "setPartUnderWarranty";
  setEstimatedRepairCost: "setEstimatedRepairCost";
  setIsValidEstimatedRepairCost: "setIsValidEstimatedRepairCost";
  setIsEstimatedRepairCostFocused: "setIsEstimatedRepairCostFocused";

  setEstimatedRepairCostCurrency: "setEstimatedRepairCostCurrency";
  setEstimatedCompletionDate: "setEstimatedCompletionDate";
  setIsValidEstimatedCompletionDate: "setIsValidEstimatedCompletionDate";
  setIsEstimatedCompletionDateFocused: "setIsEstimatedCompletionDateFocused";

  setRepairPriority: "setRepairPriority";

  setTriggerFormSubmit: "setTriggerFormSubmit";
  setCurrentStepperPosition: "setCurrentStepperPosition";
  setStepsInError: "setStepsInError";

  setIsSubmitting: "setIsSubmitting";
  setSubmitMessage: "setSubmitMessage";
  setIsSuccessful: "setIsSuccessful";
  setSuccessMessage: "setSuccessMessage";
  setIsLoading: "setIsLoading";
  setLoadingMessage: "setLoadingMessage";
};

type CreateRepairTicketDispatch =
  | {
      // all string payloads
      type:
        | CreateRepairTicketAction["setCustomerId"]
        | CreateRepairTicketAction["setUsername"]
        | CreateRepairTicketAction["setEmail"]
        | CreateRepairTicketAction["setFirstName"]
        | CreateRepairTicketAction["setMiddleName"]
        | CreateRepairTicketAction["setLastName"]
        | CreateRepairTicketAction["setPreferredName"]
        | CreateRepairTicketAction["setAddressLine"]
        | CreateRepairTicketAction["setCity"]
        | CreateRepairTicketAction["setPartName"]
        | CreateRepairTicketAction["setPartSerialId"]
        | CreateRepairTicketAction["setDateReceived"]
        | CreateRepairTicketAction["setDescriptionOfIssue"]
        | CreateRepairTicketAction["setInitialInspectionNotes"]
        | CreateRepairTicketAction["setPartsNeededModels"]
        | CreateRepairTicketAction["setEstimatedRepairCost"]
        | CreateRepairTicketAction["setEstimatedCompletionDate"]
        | CreateRepairTicketAction["setSubmitMessage"]
        | CreateRepairTicketAction["setSuccessMessage"]
        | CreateRepairTicketAction["setLoadingMessage"];

      payload: string;
    }
  | {
      // all RepairCategory payloads
      type: CreateRepairTicketAction["setRepairCategory"];
      payload: RepairCategory;
    }
  // all boolean payloads
  | {
      type:
        | CreateRepairTicketAction["clearSearchInputs"]
        | CreateRepairTicketAction["setIsValidUsername"]
        | CreateRepairTicketAction["setIsUsernameFocused"]
        | CreateRepairTicketAction["setIsValidEmail"]
        | CreateRepairTicketAction["setIsEmailFocused"]
        | CreateRepairTicketAction["setIsValidFirstName"]
        | CreateRepairTicketAction["setIsFirstNameFocused"]
        | CreateRepairTicketAction["setIsValidMiddleName"]
        | CreateRepairTicketAction["setIsMiddleNameFocused"]
        | CreateRepairTicketAction["setIsValidLastName"]
        | CreateRepairTicketAction["setIsLastNameFocused"]
        | CreateRepairTicketAction["setIsValidPreferredName"]
        | CreateRepairTicketAction["setIsPreferredNameFocused"]
        | CreateRepairTicketAction["setIsValidContactNumber"]
        | CreateRepairTicketAction["setIsContactNumberFocused"]
        | CreateRepairTicketAction["setIsValidAddressLine"]
        | CreateRepairTicketAction["setIsAddressLineFocused"]
        | CreateRepairTicketAction["setIsValidCity"]
        | CreateRepairTicketAction["setIsCityFocused"]
        | CreateRepairTicketAction["setIsValidPostalCode"]
        | CreateRepairTicketAction["setIsPostalCodeFocused"]
        | CreateRepairTicketAction["setIsValidPartName"]
        | CreateRepairTicketAction["setIsPartNameFocused"]
        | CreateRepairTicketAction["setIsValidPartSerialId"]
        | CreateRepairTicketAction["setIsPartSerialIdFocused"]
        | CreateRepairTicketAction["setIsValidDateReceived"]
        | CreateRepairTicketAction["setIsDateReceivedFocused"]
        | CreateRepairTicketAction["setIsValidDescriptionOfIssue"]
        | CreateRepairTicketAction["setIsDescriptionOfIssueFocused"]
        | CreateRepairTicketAction["setIsValidInitialInspectionNotes"]
        | CreateRepairTicketAction["setIsInitialInspectionNotesFocused"]
        | CreateRepairTicketAction["setIsValidPartsNeededModels"]
        | CreateRepairTicketAction["setIsPartsNeededModelsFocused"]
        | CreateRepairTicketAction["setPartUnderWarranty"]
        | CreateRepairTicketAction["setIsValidEstimatedRepairCost"]
        | CreateRepairTicketAction["setIsEstimatedRepairCostFocused"]
        | CreateRepairTicketAction["setIsValidEstimatedCompletionDate"]
        | CreateRepairTicketAction["setIsEstimatedCompletionDateFocused"]
        | CreateRepairTicketAction["setTriggerFormSubmit"]
        | CreateRepairTicketAction["setIsSubmitting"]
        | CreateRepairTicketAction["setIsSuccessful"]
        | CreateRepairTicketAction["setIsLoading"];

      payload: boolean;
    }
  | {
      type: CreateRepairTicketAction["setRepairPriority"];
      payload: Urgency;
    }
  | {
      type: CreateRepairTicketAction["setRequiredRepairs"];
      payload: RequiredRepairs[];
    }
  | {
      type: CreateRepairTicketAction["setPartsNeeded"];
      payload: PartsNeeded[];
    }
  | {
      type:
        | CreateRepairTicketAction["setCurrentStepperPosition"]
        | CreateRepairTicketAction["setCurrentSearchResultPage"];
      payload: number;
    }
  | {
      type: CreateRepairTicketAction["setStepsInError"];
      payload: SetStepsInErrorPayload;
    }
  | {
      type: CreateRepairTicketAction["setEstimatedRepairCostCurrency"];
      payload: Currency;
    }
  | {
      type: CreateRepairTicketAction["setCountry"];
      payload: Country;
    }
  | {
      type: CreateRepairTicketAction["setProvince"];
      payload: Province;
    }
  | {
      type: CreateRepairTicketAction["setState"];
      payload: StatesUS;
    }
  | {
      type: CreateRepairTicketAction["setContactNumber"];
      payload: PhoneNumber | string;
    }
  | {
      type: CreateRepairTicketAction["setPostalCode"];
      payload: PostalCode;
    }
  | {
      type: CreateRepairTicketAction["setCustomerSearchResults"];
      payload: Omit<CustomerDocument, "password" | "paymentInformation">[];
    }
  | {
      type: CreateRepairTicketAction["setCurrentSearchObject"];
      payload: CurrentSearchObject;
    }
  | {
      type: CreateRepairTicketAction["setSearchOperator"];
      payload: CustomerSearchOperator;
    };

type CreateRepairTicketReducer = (
  state: CreateRepairTicketState,
  action: CreateRepairTicketDispatch
) => CreateRepairTicketState;

export type {
  CreateRepairTicketAction,
  CreateRepairTicketDispatch,
  CreateRepairTicketReducer,
  CreateRepairTicketState,
  CurrentSearchObject,
  CustomerSearchOperator,
};
