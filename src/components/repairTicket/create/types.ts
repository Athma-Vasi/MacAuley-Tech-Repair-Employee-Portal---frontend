import type { Currency, SetPageInErrorPayload, Urgency } from "../../../types";
import type { CustomerDocument } from "../../customer/types";
import type { RepairCategory } from "../../dashboard/types";
import type { PartsNeeded, RequiredRepairs } from "../types";
import type { CreateRepairTicketAction } from "./actions";

type CurrentSearchObject = Record<string, string>;
type CustomerSearchOperator = "AND" | "OR";

type CreateRepairTicketState = {
  // customer information search - page 1
  clearSearchInputs: boolean;
  currentSearchObject: CurrentSearchObject;
  currentSearchResultPage: number;
  customerId: string; // selected customer id
  customerSearchResults: Omit<
    CustomerDocument,
    "password" | "paymentInformation"
  >[];
  deleteSearchObjectField: string;
  searchOperator: CustomerSearchOperator;
  selectedCustomer: CustomerDocument | null;

  // part information - page 2
  partName: string;
  partSerialId: string;
  dateReceived: string;
  descriptionOfIssue: string;
  initialInspectionNotes: string;

  // repair information - page 3
  repairCategory: RepairCategory;
  requiredRepairs: RequiredRepairs[];
  partsNeeded: PartsNeeded[];
  partsNeededModels: string;
  partUnderWarranty: boolean;
  estimatedRepairCost: string;
  estimatedRepairCostCurrency: Currency;
  estimatedCompletionDate: string;
  repairPriority: Urgency;

  // work order id is generated by the system
  // rest of the information is updated by the repair technician after the initial repair note is created

  triggerCustomerSearchSubmit: boolean;
  triggerRepairFormSubmit: boolean;
  pagesInError: Set<number>;
  isSubmitting: boolean;
  isSuccessful: boolean;
  isLoading: boolean;
  totalDocuments: number;
  totalPages: number;
  loadingMessage: string;
};

type CreateRepairTicketDispatch = {
  action: CreateRepairTicketAction["setClearSearchInputs"];
  payload: boolean;
} | {
  action: CreateRepairTicketAction["setCurrentSearchObject"];
  payload: CurrentSearchObject;
} | {
  action: CreateRepairTicketAction["setCurrentSearchResultPage"];
  payload: number;
} | {
  action: CreateRepairTicketAction["setCustomerId"];
  payload: string;
} | {
  action: CreateRepairTicketAction["setCustomerSearchResults"];
  payload: Omit<CustomerDocument, "password" | "paymentInformation">[];
} | {
  action: CreateRepairTicketAction["setDeleteSearchObjectField"];
  payload: string;
} | {
  action: CreateRepairTicketAction["setSearchOperator"];
  payload: CustomerSearchOperator;
} | {
  action: CreateRepairTicketAction["setSelectedCustomer"];
  payload: CustomerDocument | null;
} | {
  action: CreateRepairTicketAction["setPartName"];
  payload: string;
} | {
  action: CreateRepairTicketAction["setPartSerialId"];
  payload: string;
} | {
  action: CreateRepairTicketAction["setDateReceived"];
  payload: string;
} | {
  action: CreateRepairTicketAction["setDescriptionOfIssue"];
  payload: string;
} | {
  action: CreateRepairTicketAction["setInitialInspectionNotes"];
  payload: string;
} | {
  action: CreateRepairTicketAction["setRepairCategory"];
  payload: RepairCategory;
} | {
  action: CreateRepairTicketAction["setRequiredRepairs"];
  payload: RequiredRepairs[];
} | {
  action: CreateRepairTicketAction["setPartsNeeded"];
  payload: PartsNeeded[];
} | {
  action: CreateRepairTicketAction["setPartsNeededModels"];
  payload: string;
} | {
  action: CreateRepairTicketAction["setPartUnderWarranty"];
  payload: boolean;
} | {
  action: CreateRepairTicketAction["setEstimatedRepairCost"];
  payload: string;
} | {
  action: CreateRepairTicketAction["setEstimatedRepairCostCurrency"];
  payload: Currency;
} | {
  action: CreateRepairTicketAction["setEstimatedCompletionDate"];
  payload: string;
} | {
  action: CreateRepairTicketAction["setRepairPriority"];
  payload: Urgency;
} | {
  action: CreateRepairTicketAction["setTriggerCustomerSearchSubmit"];
  payload: boolean;
} | {
  action: CreateRepairTicketAction["setTriggerRepairFormSubmit"];
  payload: boolean;
} | {
  action: CreateRepairTicketAction["setPageInError"];
  payload: SetPageInErrorPayload;
} | {
  action: CreateRepairTicketAction["setIsSubmitting"];
  payload: boolean;
} | {
  action: CreateRepairTicketAction["setIsSuccessful"];
  payload: boolean;
} | {
  action: CreateRepairTicketAction["setIsLoading"];
  payload: boolean;
} | {
  action: CreateRepairTicketAction["setTotalDocuments"];
  payload: number;
} | {
  action: CreateRepairTicketAction["setTotalPages"];
  payload: number;
} | {
  action: CreateRepairTicketAction["setLoadingMessage"];
  payload: string;
};

export type {
  CreateRepairTicketDispatch,
  CreateRepairTicketState,
  CurrentSearchObject,
  CustomerSearchOperator,
};
